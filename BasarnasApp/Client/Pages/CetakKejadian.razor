<div style="width:100%">
  <center>
        <h2>LAPORAN PIHAK TERKAIT </h2>
  </center>
</div>

<div style="display:flex">
    <h4 style="width:100px">Pihak Terkait</h4>
    <h4>: @Pihak</h4>
</div>

<div style="display:flex">
    <h4 style="width:100px">Instans</h4>
    <h4>: @Instansi</h4>
</div>

<div style="display:flex">
    <h4 style="width:100px">Periode</h4>
    <h4>:
        @if (Range != null)
        {
          @ShowDate();
        }
    </h4>
</div>


<table style="margin-top:20px" class="table-cetak">
    <tr>
        <th>No</th>
        <th>Kejadian</th>
        <th>Tanggal</th>
        <th>Lokasi</th>
        <th>Status</th>
        <th>Pelapor</th>
    </tr>
    @if (Datas != null)
    {
        @foreach (var item in @Datas.Select((x, i) => new { Data = x, index = i }))
        {
            <tr>

                <td>@(item.index + 1)</td>
                <td>@item.Data.Kejadian</td>
                <td>@item.Data.Tanggal</td>
                <td>@item.Data.Lokasi</td>
                <td>@item.Data.Status</td>
                <td>@item.Data.Pelapor</td>
            </tr>
        }
    }
</table>

@code {
    [Parameter]
    public IEnumerable<ReportKejadianModel> Datas { get; set; }


    [Parameter]
    public DateRange Range { get; set; }

    [Parameter]
    public string Instansi { get; set; }

    [Parameter]
    public string Pihak { get; set; }

    public List<Penyebab> Penyebabs => Enum.GetValues(typeof(Penyebab)).Cast<Penyebab>().ToList();


    protected override Task OnInitializedAsync()
    {


        return base.OnInitializedAsync();
    }

    string ShowDate()
    {

        return $"{DateOnly.FromDateTime(Range.Start.Value).ToString()} - {DateOnly.FromDateTime(Range.End.Value).ToString()}";
    }
}


