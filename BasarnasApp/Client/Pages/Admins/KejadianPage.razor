@layout AdminLayout
@page "/admin/kejadian"

@inject IJSRuntime js
@inject IKejadianService kejadianService

<MudPaper Class="noprint" style="margin:20px; padding: 30px;">
    <div style="display: flex;">
        <MudText Typo="Typo.h5" Color="Color.Primary" Class="mb-4">Data Kejadian</MudText>
        <MudSpacer />
        <div style="display:flex">
            <MudTextField Label="Search" T="string" @bind-Value="search"></MudTextField>
            <MudDateRangePicker @ref="_picker" AutoClose=false Style="width:250px; margin-right:20px; margin-left:20px" Label="Tanggal" @bind-DateRange="_dateRange">
                <PickerActions>
                    <MudButton Class="mr-auto align-self-start" OnClick="@(() => _picker.Clear())">Clear</MudButton>
                    <MudButton OnClick="@(() => _picker.Close(false))">Cancel</MudButton>
                    <MudButton Color="Color.Primary" OnClick="@(() => _picker.Close())">Ok</MudButton>
                </PickerActions>
            </MudDateRangePicker>
            <MudButton OnClick="Cetak" Size="Size.Small" Variant="Variant.Filled" Color="Color.Warning" StartIcon="@Icons.Material.Filled.Print">Cetak</MudButton>
        </div>
    </div>

    <MudDataGrid Items="@GetData().Select((x,i)=> new {Data=x, index=i})">
        <Columns>
            <TemplateColumn Title="No" Style="width:50px">
                <CellTemplate>
                    @(context.Item.index + 1)
                </CellTemplate>
            </TemplateColumn>
            <PropertyColumn Property="x => x.Data.Kode" Title="Kode" />
            <PropertyColumn Property="x => x.Data.Tanggal" Title="Tanggal" />
            <PropertyColumn Property="x => x.Data.JenisKejadianName" Title="Kejadian" />
            <PropertyColumn Property="x => x.Data.DistrictName" Title="Distrik" />
            <PropertyColumn Property="x => x.Data.PelaporName" Title="Pelapor" />
            <PropertyColumn Property="x => x.Data.Status" Title="Status" />
            <TemplateColumn Context="item" style="width:70px">
                <CellTemplate>
                    <MudMenu Icon="@Icons.Material.Filled.MoreVert">
                        <MudMenuItem OnClick="@(()=>UbahStatus(item.Item.Data))" Icon="@Icons.Material.Filled.ChangeCircle" Variant="Variant.Filled" Color="Color.Warning">Ubah Status</MudMenuItem>
                        @if (!string.IsNullOrEmpty(item.Item.Data.LongLat))
                        {
                            <MudMenuItem OnClick="@(()=>ShowMap(item.Item.Data))" Icon="@Icons.Material.Filled.Map" Variant="Variant.Filled" Color="Color.Info">Map</MudMenuItem>
                        }

                        @if (!string.IsNullOrEmpty(item.Item.Data.Photo))
                        {
                            <MudMenuItem OnClick="@(()=>ShowPhoto(item.Item.Data))" Icon="@Icons.Material.Filled.Image" Variant="Variant.Filled" Color="Color.Info">Photo</MudMenuItem>
                        }
                    </MudMenu>

                </CellTemplate>
            </TemplateColumn>
        </Columns>
    </MudDataGrid>
</MudPaper>

@if (_dateRange != null)
{
    <div class="justprint">
        <CetakKejadianAdmin Tahun="tahun" Datas="reports"></CetakKejadianAdmin>
    </div>
}


@inject IDialogService Dialog

@code {
    DateRange _dateRange;
    public string Height = "100vh";
    ICollection<KejadianRequest> sources = new List<KejadianRequest>();
    MudDateRangePicker _picker;
    string search = string.Empty;
    List<AdminReportModel> reports = new List<AdminReportModel>();
    int tahun;
    protected override async void OnInitialized()
    {
        var now = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day);
        _dateRange = new DateRange(now, now);
        var result = await kejadianService.GetAsync();
        foreach (var item in result)
        {
            sources.Add(item);
        }

        StateHasChanged();
    }

    async Task Cetak()
    {
        reports.Clear();
        tahun = DateTime.Now.Year;
        var penanganans = await kejadianService.GePenanganan();
        var grpByMount = penanganans.Where(x => x.Tanggal.Year == tahun).GroupBy(x => new { Bulan = x.Tanggal.Month, Tahun = x.Tanggal.Year });
        foreach (var items in grpByMount)
        {
            var bulan = new AdminReportModel { Bulan = items.Key.Bulan, Tahun = items.Key.Tahun };
            var grp = items.GroupBy(x => x.InstansiName);
            int i = 1;
            foreach (var item in grp)
            {
                var first = item.FirstOrDefault();
                var model = new ReportModel { No = i, Instansi = item.Key, Kejadian = item.Count(), Kesatuan = first.Deskripsi, Tanggal = first.Tanggal };
                bulan.Datas.Add(model);
                i++;
            }
            reports.Add(bulan);
        }
        StateHasChanged();
        await js.InvokeVoidAsync("window.print");
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            StateHasChanged();

        return Task.CompletedTask;
    }


    IEnumerable<KejadianRequest> GetData()
    {
        IEnumerable<KejadianRequest> xdata = sources;

        if (!string.IsNullOrEmpty(search))
        {
            var xsearch = search.ToLower();
            xdata = xdata.Where(x => x.DistrictName.ToLower().Contains(xsearch) ||
            x.JenisKejadianName.Contains(xsearch) ||
            x.PelaporName.Contains(xsearch) ||
            x.Status.ToString().Contains(xsearch));
        }

        if (_dateRange != null)
        {
            xdata = xdata.Where(x => FilterDate(x.Tanggal));
        }

        return xdata;
    }


    bool FilterDate(DateTime tanggal)
    {
        var tgl = DateOnly.FromDateTime(tanggal);
        if (_dateRange == null)
        {
            return false;
        }

        if (_dateRange.End == null)
        {
            return DateOnly.FromDateTime(tanggal) == DateOnly.FromDateTime(_dateRange.Start.Value);
        }

        if (DateOnly.FromDateTime(_dateRange.Start.Value) == DateOnly.FromDateTime(_dateRange.End.Value))
        {
            _dateRange.End = _dateRange.End.Value.AddDays(1).AddMinutes(-1);
        }


        return tanggal >= _dateRange.Start && tanggal <= _dateRange.End;


    }


    async Task ShowMap(KejadianRequest kejadian)
    {
        DialogOptions options = new DialogOptions() { MaxWidth = MaxWidth.ExtraLarge, FullWidth = true };
        var parameters = new DialogParameters<MapPage> { { x => x.model, kejadian.LongLat } };
        var dlg = await Dialog.Show<MapPage>("Lokasi Kejadian", parameters, options).Result;
    }
    async Task UbahStatus(KejadianRequest kejadian)
    {
        DialogOptions options = new DialogOptions() { MaxWidth = MaxWidth.Small, FullWidth = true };
        var parameters = new DialogParameters<EditStatusPage> { { x => x.model, kejadian } };
        var dlg = await Dialog.Show<EditStatusPage>("Ubah Status Laporan", parameters, options).Result;

        if (!dlg.Canceled)
        {
            var model = (StatusLaporan)dlg.Data;
            var updatedStatus = await kejadianService.ChangeStatus(kejadian.Id, model);
            if (updatedStatus)
            {
                kejadian.Status = model;
            }

        }


    }


    async Task ShowPhoto(KejadianRequest kejadian)
    {
        DialogOptions options = new DialogOptions() { MaxWidth = MaxWidth.ExtraLarge, FullWidth = true };
        var parameters = new DialogParameters<PhotoPage> { { x => x.model, $"/images/kejadian/{kejadian.Photo}" } };
        var dlg = await Dialog.Show<PhotoPage>("Photo Kejadian", parameters, options).Result;
    }
}